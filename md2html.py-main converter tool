#!/usr/bin/env python3
"""
Markdown to HTML Converter
A command-line tool to convert Markdown files to clean HTML.
"""

import re
import sys
import argparse
from pathlib import Path
from typing import List, Dict, Tuple


class MarkdownToHtmlConverter:
    """Convert Markdown syntax to HTML."""
    
    def __init__(self):
        self.html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }}
        h1, h2, h3, h4, h5, h6 {{
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }}
        h1 {{ font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }}
        h2 {{ font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }}
        h3 {{ font-size: 1.25em; }}
        h4 {{ font-size: 1em; }}
        h5 {{ font-size: 0.875em; }}
        h6 {{ font-size: 0.85em; color: #6a737d; }}
        p {{ margin-bottom: 16px; }}
        ul, ol {{ margin-bottom: 16px; padding-left: 30px; }}
        li {{ margin-bottom: 4px; }}
        blockquote {{
            margin: 0 0 16px 0;
            padding: 0 16px;
            border-left: 4px solid #dfe2e5;
            color: #6a737d;
        }}
        code {{
            padding: 2px 4px;
            background-color: #f6f8fa;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 85%;
        }}
        pre {{
            background-color: #f6f8fa;
            border-radius: 6px;
            padding: 16px;
            overflow: auto;
            margin-bottom: 16px;
        }}
        pre code {{
            background-color: transparent;
            padding: 0;
        }}
        a {{
            color: #0366d6;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        hr {{
            border: none;
            height: 1px;
            background-color: #e1e4e8;
            margin: 24px 0;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 16px;
        }}
        th, td {{
            border: 1px solid #dfe2e5;
            padding: 8px 12px;
            text-align: left;
        }}
        th {{
            background-color: #f6f8fa;
            font-weight: 600;
        }}
    </style>
</head>
<body>
{content}
</body>
</html>"""

    def convert_headers(self, text: str) -> str:
        """Convert markdown headers to HTML."""
        lines = text.split('\n')
        converted_lines = []
        
        for line in lines:
            # Match headers from h1 to h6
            header_match = re.match(r'^(#{1,6})\s+(.+)$', line)
            if header_match:
                level = len(header_match.group(1))
                content = header_match.group(2).strip()
                converted_lines.append(f'<h{level}>{content}</h{level}>')
            else:
                converted_lines.append(line)
        
        return '\n'.join(converted_lines)

    def convert_emphasis(self, text: str) -> str:
        """Convert bold and italic text."""
        # Bold with **text** or __text__
        text = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', text)
        text = re.sub(r'__(.+?)__', r'<strong>\1</strong>', text)
        
        # Italic with *text* or _text_ (but not if already in bold)
        text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<em>\1</em>', text)
        text = re.sub(r'(?<!_)_([^_]+?)_(?!_)', r'<em>\1</em>', text)
        
        return text

    def convert_links(self, text: str) -> str:
        """Convert markdown links to HTML."""
        # [text](url) format
        text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text)
        
        # Auto-link URLs
        text = re.sub(r'(?<!href=")(?<!src=")(https?://[^\s<>"]+)', r'<a href="\1">\1</a>', text)
        
        return text

    def convert_inline_code(self, text: str) -> str:
        """Convert inline code with backticks."""
        return re.sub(r'`([^`]+)`', r'<code>\1</code>', text)

    def convert_code_blocks(self, text: str) -> str:
        """Convert code blocks (triple backticks)."""
        # Handle fenced code blocks with optional language
        pattern = r'```(\w+)?\n(.*?)\n```'
        
        def replace_code_block(match):
            language = match.group(1) or ''
            code_content = match.group(2)
            # Escape HTML in code blocks
            code_content = code_content.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            return f'<pre><code>{code_content}</code></pre>'
        
        return re.sub(pattern, replace_code_block, text, flags=re.DOTALL)

    def convert_lists(self, text: str) -> str:
        """Convert markdown lists to HTML."""
        lines = text.split('\n')
        converted_lines = []
        in_ul = False
        in_ol = False
        
        i = 0
        while i < len(lines):
            line = lines[i]
            
            # Unordered list
            ul_match = re.match(r'^[-*+]\s+(.+)$', line)
            if ul_match:
                if not in_ul:
                    converted_lines.append('<ul>')
                    in_ul = True
                if in_ol:
                    converted_lines.append('</ol>')
                    in_ol = False
                converted_lines.append(f'<li>{ul_match.group(1)}</li>')
            
            # Ordered list
            elif re.match(r'^\d+\.\s+(.+)$', line):
                ol_match = re.match(r'^\d+\.\s+(.+)$', line)
                if not in_ol:
                    converted_lines.append('<ol>')
                    in_ol = True
                if in_ul:
                    converted_lines.append('</ul>')
                    in_ul = False
                converted_lines.append(f'<li>{ol_match.group(1)}</li>')
            
            else:
                # Close any open lists
                if in_ul:
                    converted_lines.append('</ul>')
                    in_ul = False
                if in_ol:
                    converted_lines.append('</ol>')
                    in_ol = False
                converted_lines.append(line)
            
            i += 1
        
        # Close any remaining open lists
        if in_ul:
            converted_lines.append('</ul>')
        if in_ol:
            converted_lines.append('</ol>')
        
        return '\n'.join(converted_lines)

    def convert_blockquotes(self, text: str) -> str:
        """Convert blockquotes (lines starting with >)."""
        lines = text.split('\n')
        converted_lines = []
        in_blockquote = False
        
        for line in lines:
            if line.startswith('> '):
                if not in_blockquote:
                    converted_lines.append('<blockquote>')
                    in_blockquote = True
                converted_lines.append(f'<p>{line[2:]}</p>')
            else:
                if in_blockquote:
                    converted_lines.append('</blockquote>')
                    in_blockquote = False
                converted_lines.append(line)
        
        if in_blockquote:
            converted_lines.append('</blockquote>')
        
        return '\n'.join(converted_lines)

    def convert_horizontal_rules(self, text: str) -> str:
        """Convert horizontal rules (--- or ***)."""
        text = re.sub(r'^---+$', '<hr>', text, flags=re.MULTILINE)
        text = re.sub(r'^\*\*\*+$', '<hr>', text, flags=re.MULTILINE)
        return text

    def convert_paragraphs(self, text: str) -> str:
        """Wrap text in paragraphs."""
        lines = text.split('\n')
        converted_lines = []
        current_paragraph = []
        
        for line in lines:
            line = line.strip()
            
            # Skip empty lines and HTML tags
            if not line or line.startswith('<'):
                if current_paragraph:
                    paragraph_text = ' '.join(current_paragraph)
                    if paragraph_text.strip():
                        converted_lines.append(f'<p>{paragraph_text}</p>')
                    current_paragraph = []
                if line.startswith('<'):
                    converted_lines.append(line)
            else:
                current_paragraph.append(line)
        
        # Handle any remaining paragraph
        if current_paragraph:
            paragraph_text = ' '.join(current_paragraph)
            if paragraph_text.strip():
                converted_lines.append(f'<p>{paragraph_text}</p>')
        
        return '\n'.join(converted_lines)

    def convert_markdown_to_html(self, markdown_text: str, title: str = "Converted Document") -> str:
        """Convert markdown text to HTML."""
        html_content = markdown_text
        
        # Apply conversions in order
        html_content = self.convert_code_blocks(html_content)
        html_content = self.convert_headers(html_content)
        html_content = self.convert_horizontal_rules(html_content)
        html_content = self.convert_blockquotes(html_content)
        html_content = self.convert_lists(html_content)
        html_content = self.convert_emphasis(html_content)
        html_content = self.convert_links(html_content)
        html_content = self.convert_inline_code(html_content)
        html_content = self.convert_paragraphs(html_content)
        
        # Generate complete HTML document
        return self.html_template.format(title=title, content=html_content)


def main():
    """Main function to handle command-line arguments and file processing."""
    parser = argparse.ArgumentParser(
        description="Convert Markdown files to HTML",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s input.md                    # Convert to input.html
  %(prog)s input.md -o output.html     # Convert to output.html
  %(prog)s input.md --title "My Doc"   # Set custom title
        """
    )
    
    parser.add_argument('input', help='Input Markdown file path')
    parser.add_argument('-o', '--output', help='Output HTML file path (default: input filename with .html extension)')
    parser.add_argument('-t', '--title', help='HTML document title (default: filename without extension)')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')
    
    args = parser.parse_args()
    
    # Validate input file
    input_path = Path(args.input)
    if not input_path.exists():
        print(f"Error: Input file '{args.input}' does not exist.", file=sys.stderr)
        sys.exit(1)
    
    if not input_path.is_file():
        print(f"Error: '{args.input}' is not a file.", file=sys.stderr)
        sys.exit(1)
    
    # Determine output file path
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = input_path.with_suffix('.html')
    
    # Determine title
    title = args.title or input_path.stem
    
    try:
        # Read markdown file
        with open(input_path, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        # Convert to HTML
        converter = MarkdownToHtmlConverter()
        html_content = converter.convert_markdown_to_html(markdown_content, title)
        
        # Write HTML file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"Successfully converted '{input_path}' to '{output_path}'")
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
